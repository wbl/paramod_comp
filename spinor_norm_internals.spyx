#Cython file
from sage.matrix.constructor import Matrix
from sage.modules.free_module_element import vector
from sage.rings.rational_field import QQ

def reflection(v, Q):
    # Determine a matrix nxn for reflection by v with norm Q
    # Q will be the matrix v*Q*v is the form: so half-entries off diagonal

    #Is this correct? there were attempts that were not
    cdef int n, i
    n=Q.dimensions()[0]
    I=Matrix(QQ, n, n, 1)
    norm=v.dot_product(Q*v)
    vt=Q*v
    Vt=Matrix(QQ, 1, n)
    V=Matrix(QQ, n, 1)
    V[:,0]=v
    Vt[0,:]=vt
    return I-2*V*Vt*1/norm

def norm(u,v,Q):
    return u.dot_product(Q*v)

def orthogonal_basis(Q):
    #ret.tranpose()*Q*ret is diagonal
    cdef int n,i,j
    n=Q.dimensions()[0]
    M=Matrix(QQ, n, n)
    for i in range(0, n):
        M[i,i]=1
    for i in range(0, n):
        v=M.column(i)
        for j in range(0, i):
            v=v-norm(M.column(j), v, Q)*M.column(j)/norm(M.column(j), M.column(j), Q)
        for j in range(0,n):
            M[j, i]=v[j]
    return M

def spinor_norm(M, Q):
    # Compute the spinor norm of isometry M with norm Q
    cdef int n,i
    n=Q.dimensions()[0]
    transform=M
    T=orthogonal_basis(Q)
    retval=1
    for i in range(0,n):
        vec=T.column(i)
        tmp=transform*vec-vec
        s=tmp.dot_product(Q*tmp)
        if s!=0:
            v=tmp
            vt=Q*v
            Vt=Matrix(QQ, 1, n)
            V=Matrix(QQ, n, 1)
            V[:,0]=v
            Vt[0,:]=vt
            transform=transform-2*(transform*V)*Vt*1/s
            retval*=s
    return retval
